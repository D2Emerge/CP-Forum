name: Deploy NodeBB to AWS ECS

on:
  push:
    branches: ["release"]
    tags: ["v*"]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: forum-nodebb
  ECR_REPOSITORY: forum-nodebb-app
  ECS_CLUSTER: forum-nodebb-cluster
  ECS_SERVICE: forum-nodebb-service
  TASK_DEFINITION_FILE: aws/task-definitions/production.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image tag
        id: image-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --tag $IMAGE_URI \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push .

          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Update task definition with new image
        id: update-task-def
        run: |
          jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
             '.containerDefinitions[0].image = $IMAGE' \
             ${{ env.TASK_DEFINITION_FILE }} > updated-task-def.json

          echo "‚úÖ Task definition updated: ${{ steps.build-image.outputs.image }}"

      - name: Register new task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "‚úÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—É task definition: $TASK_DEF_ARN"

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition ${{ steps.register-task-def.outputs.task_definition_arn }}

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

      - name: Get deployment status
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names $PROJECT_NAME-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].{running:runningCount,desired:desiredCount}' \
            --output json)

          echo "ÔøΩÔøΩ Deployment successful!"
          echo "üåê Application URL: http://$ALB_DNS"
          echo "üìä Service Status: $(echo $SERVICE_STATUS | jq -r '"Running: \(.running)/\(.desired)"')"
          echo "‚è∞ Please wait 2-3 minutes for the service to fully start"

      - name: Clean up old ECR images
        run: |
          echo "üßπ Images cleanup..."
          aws ecr list-images \
            --repository-name $ECR_REPOSITORY \
            --filter tagStatus=UNTAGGED \
            --query 'sort_by(imageIds, &imageDigest)[:-10]' \
            --output json | \
          jq -r '.[] | .imageDigest' | \
          while read digest; do
            if [ -n "$digest" ]; then
              aws ecr batch-delete-image \
                --repository-name $ECR_REPOSITORY \
                --image-ids imageDigest=$digest || true
            fi
          done

          echo "‚úÖ Cleanup successful!"
