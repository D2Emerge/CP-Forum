name: Deploy NodeBB to AWS ECS

on:
  push:
    branches: ["release"]
    tags: ["v*"]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: forum-nodebb
  ECR_REPOSITORY: forum-nodebb-app
  ECS_CLUSTER: forum-nodebb-cluster
  ECS_SERVICE: forum-nodebb-service
  TASK_DEFINITION_FILE: aws/task-definitions/production.json

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image tag
        id: image-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --tag $IMAGE_URI \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push .

          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Update task definition with new image
        id: update-task-def
        run: |
          jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
             '.containerDefinitions[0].image = $IMAGE' \
             ${{ env.TASK_DEFINITION_FILE }} > updated-task-def.json

          echo "‚úÖ Task definition updated: ${{ steps.build-image.outputs.image }}"

      - name: Register new task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "‚úÖ Registered new task definition: $TASK_DEF_ARN"

      - name: Get infrastructure info
        id: infra-info
        run: |
          VPC_ID=$(aws ec2 describe-vpcs \
            --filters "Name=tag:Name,Values=$PROJECT_NAME-vpc" \
            --query 'Vpcs[0].VpcId' \
            --output text)

          SUBNETS=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=$VPC_ID" \
            --query 'Subnets[0:2].SubnetId' \
            --output text | tr '\t' ',')

          SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=$PROJECT_NAME-ecs-sg" \
            --query 'SecurityGroups[0].GroupId' \
            --output text)

          TG_ARN=$(aws elbv2 describe-target-groups \
            --names $PROJECT_NAME-tg \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text)

          echo "subnets=$SUBNETS" >> $GITHUB_OUTPUT
          echo "security_group=$SG_ID" >> $GITHUB_OUTPUT
          echo "target_group_arn=$TG_ARN" >> $GITHUB_OUTPUT

      - name: Create or update ECS service
        run: |
          if aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].serviceName' --output text 2>/dev/null | grep -q $ECS_SERVICE; then
            echo "Updating existing ECS service..."
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECS_SERVICE \
              --task-definition ${{ steps.register-task-def.outputs.task_definition_arn }}
          else
            echo "Creating new ECS service..."
            aws ecs create-service \
              --cluster $ECS_CLUSTER \
              --service-name $ECS_SERVICE \
              --task-definition ${{ steps.register-task-def.outputs.task_definition_arn }} \
              --desired-count 1 \
              --capacity-provider-strategy capacityProvider=FARGATE_SPOT,weight=100,base=0 \
              --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra-info.outputs.subnets }}],securityGroups=[${{ steps.infra-info.outputs.security_group }}],assignPublicIp=ENABLED}" \
              --load-balancers targetGroupArn=${{ steps.infra-info.outputs.target_group_arn }},containerName=$PROJECT_NAME-container,containerPort=4567
          fi

      - name: Setup auto scaling
        run: |
          if ! aws application-autoscaling describe-scalable-targets \
            --service-namespace ecs \
            --resource-ids service/$ECS_CLUSTER/$ECS_SERVICE &>/dev/null; then
            
            aws application-autoscaling register-scalable-target \
              --service-namespace ecs \
              --scalable-dimension ecs:service:DesiredCount \
              --resource-id service/$ECS_CLUSTER/$ECS_SERVICE \
              --min-capacity 1 \
              --max-capacity 10
            
            aws application-autoscaling put-scaling-policy \
              --service-namespace ecs \
              --scalable-dimension ecs:service:DesiredCount \
              --resource-id service/$ECS_CLUSTER/$ECS_SERVICE \
              --policy-name $PROJECT_NAME-cpu-scaling \
              --policy-type TargetTrackingScaling \
              --target-tracking-scaling-policy-configuration '{
                "TargetValue": 70.0,
                "PredefinedMetricSpecification": {
                  "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
                },
                "ScaleInCooldown": 300,
                "ScaleOutCooldown": 300
              }'
          fi

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

      - name: Get deployment status
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names $PROJECT_NAME-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].{running:runningCount,desired:desiredCount}' \
            --output json)

          echo "üéâ Deployment successful!"
          echo "üåê Application URL: http://$ALB_DNS"
          echo "üìä Service Status: $(echo $SERVICE_STATUS | jq -r '"Running: \(.running)/\(.desired)"')"
          echo "‚è∞ Please wait 2-3 minutes for the service to fully start"

      - name: Clean up old ECR images
        run: |
          aws ecr list-images \
            --repository-name $ECR_REPOSITORY \
            --filter tagStatus=UNTAGGED \
            --query 'sort_by(imageIds, &imageDigest)[:-10]' \
            --output json | \
          jq -r '.[]? | .imageDigest' | \
          while read digest; do
            if [ -n "$digest" ]; then
              aws ecr batch-delete-image \
                --repository-name $ECR_REPOSITORY \
                --image-ids imageDigest=$digest || true
            fi
          done
