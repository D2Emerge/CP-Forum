name: Deploy NodeBB to AWS ECS

on:
  push:
    branches: ["release"]
    tags: ["v*"]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: forum-nodebb
  ECR_REPOSITORY: forum-nodebb-app
  ECS_CLUSTER: forum-nodebb-cluster
  ECS_SERVICE: forum-nodebb-service
  TASK_DEFINITION_FILE: aws/task-definitions/production.json
  DOMAIN_NAME: forum.codeproject.com
  ROOT_DOMAIN: codeproject.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image tag
        id: image-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --tag $IMAGE_URI \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push .

          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Setup SSL certificate for forum.codeproject.com
        id: ssl-setup
        run: |
          echo "🔒 Setting up SSL for ${{ env.DOMAIN_NAME }}"

          # Check if certificate already exists
          EXISTING_CERT=$(aws acm list-certificates \
            --query "CertificateSummaryList[?DomainName=='${{ env.DOMAIN_NAME }}'].CertificateArn" \
            --output text)

          if [ -n "$EXISTING_CERT" ] && [ "$EXISTING_CERT" != "None" ]; then
            echo "✅ Certificate already exists: $EXISTING_CERT"
            echo "certificate_arn=$EXISTING_CERT" >> $GITHUB_OUTPUT
            echo "ssl_enabled=true" >> $GITHUB_OUTPUT
          else
            echo "📜 Creating new SSL certificate for ${{ env.DOMAIN_NAME }}"
            
            # Request certificate for forum.codeproject.com
            CERT_ARN=$(aws acm request-certificate \
              --domain-name ${{ env.DOMAIN_NAME }} \
              --validation-method DNS \
              --query 'CertificateArn' \
              --output text)
            
            echo "Certificate requested: $CERT_ARN"
            echo "certificate_arn=$CERT_ARN" >> $GITHUB_OUTPUT
            echo "ssl_enabled=true" >> $GITHUB_OUTPUT
            echo "new_certificate=true" >> $GITHUB_OUTPUT
          fi

      - name: Setup DNS validation for forum.codeproject.com
        if: steps.ssl-setup.outputs.new_certificate == 'true'
        run: |
          CERT_ARN="${{ steps.ssl-setup.outputs.certificate_arn }}"

          echo "⏳ Setting up DNS validation for ${{ env.DOMAIN_NAME }}"

          # Wait for certificate to be processed
          sleep 30

          # Get hosted zone ID for codeproject.com
          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones \
            --query "HostedZones[?Name=='${{ env.ROOT_DOMAIN }}.'].Id" \
            --output text | sed 's|/hostedzone/||')

          if [ -z "$HOSTED_ZONE_ID" ] || [ "$HOSTED_ZONE_ID" == "None" ]; then
            echo "❌ Hosted zone not found for ${{ env.ROOT_DOMAIN }}"
            echo "Please create Route 53 hosted zone for codeproject.com first"
            exit 1
          fi

          echo "Using hosted zone: $HOSTED_ZONE_ID for ${{ env.ROOT_DOMAIN }}"

          # Get validation records
          VALIDATION_RECORDS=$(aws acm describe-certificate \
            --certificate-arn $CERT_ARN \
            --query 'Certificate.DomainValidationOptions[].ResourceRecord')

          # Create validation records
          echo $VALIDATION_RECORDS | jq -c '.[]' | while read record; do
            NAME=$(echo $record | jq -r '.Name')
            VALUE=$(echo $record | jq -r '.Value')
            
            cat > validation-record.json << EOL
          {
            "Comment": "SSL Certificate Validation for forum.codeproject.com",
            "Changes": [
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "$NAME",
                  "Type": "CNAME",
                  "TTL": 300,
                  "ResourceRecords": [
                    {
                      "Value": "$VALUE"
                    }
                  ]
                }
              }
            ]
          }
          EOL
            
            aws route53 change-resource-record-sets \
              --hosted-zone-id $HOSTED_ZONE_ID \
              --change-batch file://validation-record.json
            
            echo "✅ DNS validation record created: $NAME"
          done

      - name: Wait for SSL certificate validation
        if: steps.ssl-setup.outputs.new_certificate == 'true'
        run: |
          CERT_ARN="${{ steps.ssl-setup.outputs.certificate_arn }}"

          echo "⏳ Waiting for SSL certificate validation for ${{ env.DOMAIN_NAME }}..."
          echo "This may take 5-10 minutes..."

          # Wait for certificate validation with timeout
          timeout 900 aws acm wait certificate-validated --certificate-arn $CERT_ARN || {
            echo "❌ Certificate validation timed out after 15 minutes"
            echo "Please check DNS records in Route 53 and try again"
            exit 1
          }

          echo "✅ SSL certificate validated successfully for ${{ env.DOMAIN_NAME }}!"

      - name: Update task definition with HTTPS config
        id: update-task-def
        run: |
          # Update image
          jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
             '.containerDefinitions[0].image = $IMAGE' \
             ${{ env.TASK_DEFINITION_FILE }} > updated-task-def.json

          # Add HTTPS environment variables for forum.codeproject.com
          jq --arg SITE_URL "https://${{ env.DOMAIN_NAME }}" \
             '.containerDefinitions[0].environment = (.containerDefinitions[0].environment // []) + [
               {"name": "SITE_URL", "value": $SITE_URL},
               {"name": "url", "value": $SITE_URL},
               {"name": "FORCE_HTTPS", "value": "true"},
               {"name": "TRUST_PROXY", "value": "true"},
               {"name": "DOMAIN", "value": "${{ env.DOMAIN_NAME }}"}
             ]' updated-task-def.json > temp.json && mv temp.json updated-task-def.json

          echo "✅ Task definition updated with HTTPS config for ${{ env.DOMAIN_NAME }}"

      - name: Register new task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "✅ Registered new task definition: $TASK_DEF_ARN"

      - name: Get infrastructure info
        id: infra-info
        run: |
          VPC_ID=$(aws ec2 describe-vpcs \
            --filters "Name=tag:Name,Values=$PROJECT_NAME-vpc" \
            --query 'Vpcs[0].VpcId' \
            --output text)

          PUBLIC_SUBNETS=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=$VPC_ID" "Name=map-public-ip-on-launch,Values=true" \
            --query 'Subnets[0:2].SubnetId' \
            --output text | tr '\t' ',')

          SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=$PROJECT_NAME-ecs-sg" \
            --query 'SecurityGroups[0].GroupId' \
            --output text)

          TG_ARN=$(aws elbv2 describe-target-groups \
            --names $PROJECT_NAME-tg \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text)

          echo "subnets=$PUBLIC_SUBNETS" >> $GITHUB_OUTPUT
          echo "security_group=$SG_ID" >> $GITHUB_OUTPUT
          echo "target_group_arn=$TG_ARN" >> $GITHUB_OUTPUT

      - name: Setup HTTPS listener on ALB
        run: |
          ALB_ARN=$(aws elbv2 describe-load-balancers \
            --names $PROJECT_NAME-alb \
            --query 'LoadBalancers[0].LoadBalancerArn' \
            --output text)

          CERT_ARN="${{ steps.ssl-setup.outputs.certificate_arn }}"
          TG_ARN="${{ steps.infra-info.outputs.target_group_arn }}"

          # Check if HTTPS listener already exists
          HTTPS_LISTENER=$(aws elbv2 describe-listeners \
            --load-balancer-arn $ALB_ARN \
            --query 'Listeners[?Port==`443`].ListenerArn' \
            --output text)

          if [ -z "$HTTPS_LISTENER" ] || [ "$HTTPS_LISTENER" == "None" ]; then
            echo "🔒 Creating HTTPS listener for ${{ env.DOMAIN_NAME }}..."
            aws elbv2 create-listener \
              --load-balancer-arn $ALB_ARN \
              --protocol HTTPS \
              --port 443 \
              --certificates CertificateArn=$CERT_ARN \
              --default-actions Type=forward,TargetGroupArn=$TG_ARN
            
            echo "✅ HTTPS listener created"
          else
            echo "🔄 Updating existing HTTPS listener with certificate..."
            aws elbv2 modify-listener \
              --listener-arn $HTTPS_LISTENER \
              --certificates CertificateArn=$CERT_ARN
            
            echo "✅ HTTPS listener updated"
          fi

          # Setup HTTP to HTTPS redirect
          HTTP_LISTENER=$(aws elbv2 describe-listeners \
            --load-balancer-arn $ALB_ARN \
            --query 'Listeners[?Port==`80`].ListenerArn' \
            --output text)

          if [ -n "$HTTP_LISTENER" ] && [ "$HTTP_LISTENER" != "None" ]; then
            aws elbv2 modify-listener \
              --listener-arn $HTTP_LISTENER \
              --default-actions Type=redirect,RedirectConfig='{Protocol=HTTPS,Port=443,StatusCode=HTTP_301}'
            
            echo "✅ HTTP to HTTPS redirect configured"
          fi

      - name: Setup CNAME for forum.codeproject.com
        run: |
          # Get ALB DNS name
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names $PROJECT_NAME-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          # Get hosted zone for codeproject.com
          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones \
            --query "HostedZones[?Name=='${{ env.ROOT_DOMAIN }}.'].Id" \
            --output text | sed 's|/hostedzone/||')

          # Create CNAME record for forum.codeproject.com
          cat > domain-cname.json << EOL
          {
            "Comment": "CNAME for NodeBB Forum at forum.codeproject.com",
            "Changes": [
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "${{ env.DOMAIN_NAME }}",
                  "Type": "CNAME",
                  "TTL": 300,
                  "ResourceRecords": [
                    {
                      "Value": "$ALB_DNS"
                    }
                  ]
                }
              }
            ]
          }
          EOL

          aws route53 change-resource-record-sets \
            --hosted-zone-id $HOSTED_ZONE_ID \
            --change-batch file://domain-cname.json

          echo "✅ CNAME record created: ${{ env.DOMAIN_NAME }} → $ALB_DNS"

      - name: Create or update ECS service
        run: |
          if aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].serviceName' --output text 2>/dev/null | grep -q $ECS_SERVICE; then
            echo "🔄 Updating existing ECS service..."
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECS_SERVICE \
              --task-definition ${{ steps.register-task-def.outputs.task_definition_arn }} \
              --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra-info.outputs.subnets }}],securityGroups=[${{ steps.infra-info.outputs.security_group }}],assignPublicIp=ENABLED}"
          else
            echo "🆕 Creating new ECS service..."
            aws ecs create-service \
              --cluster $ECS_CLUSTER \
              --service-name $ECS_SERVICE \
              --task-definition ${{ steps.register-task-def.outputs.task_definition_arn }} \
              --desired-count 1 \
              --capacity-provider-strategy capacityProvider=FARGATE_SPOT,weight=100,base=0 \
              --network-configuration "awsvpcConfiguration={subnets=[${{ steps.infra-info.outputs.subnets }}],securityGroups=[${{ steps.infra-info.outputs.security_group }}],assignPublicIp=ENABLED}" \
              --load-balancers targetGroupArn=${{ steps.infra-info.outputs.target_group_arn }},containerName=$PROJECT_NAME-container,containerPort=4567
          fi

      - name: Setup auto scaling
        run: |
          if ! aws application-autoscaling describe-scalable-targets \
            --service-namespace ecs \
            --resource-ids service/$ECS_CLUSTER/$ECS_SERVICE &>/dev/null; then
            
            aws application-autoscaling register-scalable-target \
              --service-namespace ecs \
              --scalable-dimension ecs:service:DesiredCount \
              --resource-id service/$ECS_CLUSTER/$ECS_SERVICE \
              --min-capacity 1 \
              --max-capacity 10
            
            aws application-autoscaling put-scaling-policy \
              --service-namespace ecs \
              --scalable-dimension ecs:service:DesiredCount \
              --resource-id service/$ECS_CLUSTER/$ECS_SERVICE \
              --policy-name $PROJECT_NAME-cpu-scaling \
              --policy-type TargetTrackingScaling \
              --target-tracking-scaling-policy-configuration '{
                "TargetValue": 70.0,
                "PredefinedMetricSpecification": {
                  "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
                },
                "ScaleInCooldown": 300,
                "ScaleOutCooldown": 300
              }'
          fi

      - name: Wait for service stability
        run: |
          echo "⏳ Waiting for service stability..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

      - name: Get deployment status
        run: |
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].{running:runningCount,desired:desiredCount}' \
            --output json)

          echo ""
          echo "🎉 Deployment successful!"
          echo "🌐 NodeBB Forum URL: https://${{ env.DOMAIN_NAME }}"
          echo "🔒 SSL Certificate: ✅ Configured"
          echo "📊 Service Status: $(echo $SERVICE_STATUS | jq -r '"Running: \(.running)/\(.desired)"')"
          echo "⏰ Please wait 2-3 minutes for NodeBB to fully initialize"
          echo ""
          echo "🔗 Direct ALB access (for testing):"
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names $PROJECT_NAME-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "   http://$ALB_DNS"

      - name: Clean up old ECR images
        run: |
          aws ecr list-images \
            --repository-name $ECR_REPOSITORY \
            --filter tagStatus=UNTAGGED \
            --query 'sort_by(imageIds, &imageDigest)[:-10]' \
            --output json | \
          jq -r '.[]? | .imageDigest' | \
          while read digest; do
            if [ -n "$digest" ]; then
              aws ecr batch-delete-image \
                --repository-name $ECR_REPOSITORY \
                --image-ids imageDigest=$digest || true
            fi
          done
